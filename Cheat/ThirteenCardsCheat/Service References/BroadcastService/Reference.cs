//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ThirteenCardsCheat.BroadcastService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BroadcastService.IBroadcast", CallbackContract=typeof(ThirteenCardsCheat.BroadcastService.IBroadcastCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IBroadcast {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadcast/Connect")]
        void Connect();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadcast/Connect")]
        System.Threading.Tasks.Task ConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadcast/Broadcast", ReplyAction="http://tempuri.org/IBroadcast/BroadcastResponse")]
        void Broadcast(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBroadcast/Broadcast", ReplyAction="http://tempuri.org/IBroadcast/BroadcastResponse")]
        System.Threading.Tasks.Task BroadcastAsync(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IBroadcast/Close")]
        void Close();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IBroadcast/Close")]
        System.Threading.Tasks.Task CloseAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBroadcastCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBroadcast/OnDataBroadcast")]
        void OnDataBroadcast(byte[] data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBroadcastChannel : ThirteenCardsCheat.BroadcastService.IBroadcast, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BroadcastClient : System.ServiceModel.DuplexClientBase<ThirteenCardsCheat.BroadcastService.IBroadcast>, ThirteenCardsCheat.BroadcastService.IBroadcast {
        
        public BroadcastClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public BroadcastClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public BroadcastClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BroadcastClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BroadcastClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect() {
            base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
        
        public void Broadcast(byte[] data) {
            base.Channel.Broadcast(data);
        }
        
        public System.Threading.Tasks.Task BroadcastAsync(byte[] data) {
            return base.Channel.BroadcastAsync(data);
        }
        
        public void Close() {
            base.Channel.Close();
        }
        
        public System.Threading.Tasks.Task CloseAsync() {
            return base.Channel.CloseAsync();
        }
    }
}
